from russian_regions.russian_regions import Region

"""
@pytest.fixture(scope='module')
def db():
    db = ...
    db.connect()
    yield db
    db.close()


def test_data_from_db(db):
    ...
"""
"""
@pytest.fixture(scope='module')
def test_region():
    test_region = Region('')
"""


class TestRegion:
    def test_find_postcodes(self):
        """Последовательность из 6-ти цифр
         - почтовый индекс."""

        address = ('125212 Ленинградское шоссе, д. 155 634009,'
                   ' пр-кт Ленина, Томск, Томская область,')

        assert Region(address)._find_postcodes() == ['125212',
                                                     '634009']

    def test_find_postcodes_not_geographical_cords(self):
        """Географические координаты
         не определяются как почтовый индекс."""

        address = ('57.323161, 38.505162, Совхозная'
                   ' улица, 10А, посёлок городского типа')

        assert not Region(address)._find_postcodes()

    def test_find_postcodes_five_symb_postcode(self):
        """Последовательность из 5 цифр
        не определяется как почтовый индекс."""

        address = ('Новые Лапсары, городской округ Чебоксары,'
                   ' Чувашская Республика, 42803')

        assert not Region(address)._find_postcodes()

    def test_find_region_names_federal_cities(self):
        """Названия федеральных городов определяются корректно."""

        address = ('Загородное шоссе, 2с5, Москва, 117152,'
                   'Партизанская улица, 14, Санкт-Петербург, 195248,'
                   'переулок Шевкопляса, 9, Инкерман,'
                   'Балаклавский район, Севастополь, 299703')
        address2 = ('улица Фрунзе, 19, Новосибирск, 630091,'
                    'Московское шоссе, д. 14, г. Киров')

        assert Region(address)._find_region_names() == ['москва',
                                                        'санкт-петербург',
                                                        'севастополь']
        assert not Region(address2)._find_region_names()

    def test_find_region_names_republics(self):
        """Названия республик определяются корректно."""

        address = ('Полевая улица, 26А, село Высокая Гора,'
                   'Респ. Татарстан, 422701'
                   'улица Карла Маркса, 270А, Ижевск, '
                   'Удмуртская Республика, Коммунистическая улица,'
                   '21А, Сыктывкар, Республика Коми, 167000,'
                   'улица Орджоникидзе, 47, Нальчик,'
                   'Кабардино-Балкарская Республика')

        assert Region(address)._find_region_names() == ['татарстан',
                                                        'удмуртская',
                                                        'коми',
                                                        'кабардино-балкарская']

    def test_find_region_names_autonomous_regions(self):
        """Названия автономных округов определяются корректно."""

        address = ('Анадырь, Чукотский автономный округ, 689000,'
                   'улица имени В.И. Ленина, 12, Нарьян-Мар,'
                   'Ненецкий автономный округ, 166000,'
                   'улица Чубынина, 12, Салехард,'
                   'Ямало-Ненецкий автономный округ, 629008')

        assert Region(address)._find_region_names() == ['чукотский',
                                                        'ненецкий',
                                                        'ямало-ненецкий']

    def test_find_region_names_regions(self):
        """Названия областей определяются корректно."""

        address = ('Советская улица, 6, Ивановская область, Иваново, 153000,'
                   'проспект Ленина, 82, обл. Мурманская Мурманск, 183038,'
                   'Обл Архангельская, г. Архангельск')

        assert Region(address)._find_region_names() == ['ивановская',
                                                        'мурманская',
                                                        'архангельская']

    def test_find_region_names_side_regions(self):
        """Названия краев определяются корректно."""

        address = ('улица Карла Маркса, 137А, Красноярск,'
                   ' край Красноярский 660017,'
                   'бобр Красноярский мокр. Краснодарский,'
                   ' кр. Ставропольский,'
                   'ул. ленина 15 Ставропольский край ул. ленина 15')

        assert Region(address)._find_region_names() == ['красноярский',
                                                        'ставропольский',
                                                        'ставропольский']

    def test_find_region_names_hard_cases(self):
        """Другие случаи-исключения
         обрабатываются ожидаемым поведением."""

        address = ('Театральный переулок, 10, Биробиджан,'
                   'Еврейская автономная область, 679016,'
                   'проспект Ленина, 30/1, Якутск, '
                   'Республика Саха (Якутия), 677011,'
                   'алтайский край приморский край край край,'
                   'проспект Мира, 4, Владикавказ,'
                   'Республика Северная Осетия — Алания')

        assert Region(address)._find_region_names() == ['еврейская',
                                                        'автономная',
                                                        'саха',
                                                        'алтайский',
                                                        'приморский',
                                                        'край',
                                                        'край',
                                                        'край',
                                                        'северная осетия']
